{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad4a59d9-3003-473c-b359-4b4712cb1ca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "\n",
    "def check_stationarity(df):\n",
    "    \"\"\"\n",
    "    Tests stationarity for each variable, visualizes fedrate vs dfedrate, and returns a DataFrame with stationary variables.\n",
    "    Saves stationarity results and plots to results/.\n",
    "    \"\"\"\n",
    "    # Ensure the plots directory exists\n",
    "    os.makedirs(\"results/plots\", exist_ok=True)\n",
    "    os.makedirs(\"results/analysis\", exist_ok=True)\n",
    "\n",
    "    # Task 9: Test stationarity for each variable (fedrate, unempgr, inflat)\n",
    "    variables = {'unempgr': df['unempgr'], 'fedrate': df['fedrate'], 'inflat': df['inflat']}\n",
    "    stationary_vars = {}\n",
    "    with open(\"results/analysis/stationarity_results.txt\", \"w\") as f:\n",
    "        f.write(\"Stationarity Check (ADF Test Results):\\n\\n\")\n",
    "        for name, series in variables.items():\n",
    "            result = adfuller(series.dropna())\n",
    "            f.write(f\"ADF Test for {name}:\\n\")\n",
    "            f.write(f\"ADF Statistic: {result[0]:.4f}\\n\")\n",
    "            f.write(f\"p-value: {result[1]:.4f}\\n\")\n",
    "            f.write(f\"Critical Values: {result[4]}\\n\")\n",
    "            if result[1] < 0.05:\n",
    "                f.write(f\"{name} is stationary (p < 0.05)\\n\\n\")\n",
    "                stationary_vars[name] = series\n",
    "            else:\n",
    "                f.write(f\"{name} is not stationary (p >= 0.05)\\n\\n\")\n",
    "                if name == 'fedrate':\n",
    "                    # Task 11: Test dfedrate for stationarity\n",
    "                    dfedrate = df['dfedrate']\n",
    "                    result_dfed = adfuller(dfedrate.dropna())\n",
    "                    f.write(f\"ADF Test for dfedrate (differenced fedrate):\\n\")\n",
    "                    f.write(f\"ADF Statistic: {result_dfed[0]:.4f}\\n\")\n",
    "                    f.write(f\"p-value: {result_dfed[1]:.4f}\\n\")\n",
    "                    f.write(f\"Critical Values: {result_dfed[4]}\\n\")\n",
    "                    if result_dfed[1] < 0.05:\n",
    "                        f.write(\"dfedrate is stationary (p < 0.05)\\n\\n\")\n",
    "                        stationary_vars['dfedrate'] = dfedrate\n",
    "                    else:\n",
    "                        f.write(\"dfedrate is not stationary (p >= 0.05)\\n\\n\")\n",
    "\n",
    "    # Task 12: Visualize fedrate and dfedrate to confirm trend removal\n",
    "    plt.figure(figsize=(12, 5), dpi=100)\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(df['fedrate'], label='Federal Funds Rate (%)', color='green')\n",
    "    plt.title('Federal Funds Rate (Before Differencing)')\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Percentage')\n",
    "    plt.grid(True, linestyle='--', alpha=0.7)\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(df['dfedrate'], label='Differenced Federal Funds Rate (%)', color='purple')\n",
    "    plt.title('Differenced Federal Funds Rate')\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Percentage Change')\n",
    "    plt.grid(True, linestyle='--', alpha=0.7)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(\"results/plots/fedrate_comparison.png\")\n",
    "    plt.close()\n",
    "\n",
    "    # Create a new DataFrame with stationary variables\n",
    "    stationary_df = pd.DataFrame(stationary_vars, index=df.index)\n",
    "    stationary_df = stationary_df.dropna()\n",
    "\n",
    "    return stationary_df\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    from import_data import import_data\n",
    "    from merge_data import merge_data\n",
    "    from feature_engineering import feature_engineering\n",
    "    unemp_q, inflat_q, fedfund_q = import_data()\n",
    "    df = merge_data(unemp_q, inflat_q, fedfund_q)\n",
    "    df = feature_engineering(df)\n",
    "    stationary_df = check_stationarity(df)\n",
    "    print(\"Stationarity check completed\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
