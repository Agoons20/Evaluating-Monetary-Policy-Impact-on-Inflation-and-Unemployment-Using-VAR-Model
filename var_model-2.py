{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5200c08e-1599-4d7c-b071-3572ae4599b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from statsmodels.tsa.vector_ar.var_model import VAR\n",
    "import os\n",
    "\n",
    "def fit_var_model(data):\n",
    "    \"\"\"\n",
    "    Builds a VAR model, selects lags, splits data into train/test sets.\n",
    "    Returns the fitted VAR model, training data, test data, and forecast DataFrame.\n",
    "    Saves model outputs to results/models/.\n",
    "    \"\"\"\n",
    "    # Ensure the models directory exists\n",
    "    os.makedirs(\"results/models\", exist_ok=True)\n",
    "\n",
    "    # Task 13: Create DataFrame with unempgr, dfedrate, and inflat for VAR model\n",
    "    var_data = data[['unempgr', 'dfedrate', 'inflat']]\n",
    "\n",
    "    # Task 14: Function to select optimal lag length\n",
    "    def select_var_lags(data, maxlags=8, ic='aic'):\n",
    "        ic_values = {}\n",
    "        for lag in range(1, maxlags + 1):\n",
    "            try:\n",
    "                model = VAR(data).fit(lag)\n",
    "                ic_values[lag] = getattr(model, ic)\n",
    "            except Exception as e:\n",
    "                print(f\"Error fitting VAR with {lag} lags: {e}\")\n",
    "                continue\n",
    "        optimal_lag = min(ic_values, key=ic_values.get)\n",
    "        return optimal_lag\n",
    "\n",
    "    # Task 16: Split data into training and test sets (96% train, 4% test)\n",
    "    total_rows = len(var_data)\n",
    "    test_size = int(total_rows * 0.04)  # 4% for test (â‰ˆ8 quarters)\n",
    "    train = var_data.iloc[:-test_size]\n",
    "    test = var_data.iloc[-test_size:]\n",
    "\n",
    "    # Task 14: Select optimal lag length using AIC\n",
    "    optimal_lag_aic = select_var_lags(train, maxlags=8, ic='aic')\n",
    "    with open(\"results/models/lag_selection.txt\", \"w\") as f:\n",
    "        f.write(\"Lag Selection Results:\\n\")\n",
    "        f.write(f\"Optimal lag length based on AIC: {optimal_lag_aic}\\n\")\n",
    "        f.write(\"Note: compare_var_lags.py suggested 5 lags, but we chose 3 lags based on highest log likelihood and lowest residual correlation.\\n\")\n",
    "\n",
    "    # Fit VAR model with chosen lags (3 lags based on task 14)\n",
    "    model = VAR(train)\n",
    "    results = model.fit(maxlags=3)\n",
    "\n",
    "    # Task 13: Save VAR model summary and interpretation\n",
    "    with open(\"results/models/var_model_summary.txt\", \"w\") as f:\n",
    "        f.write(str(results.summary()))\n",
    "    with open(\"results/models/var_model_interpretation.txt\", \"w\") as f:\n",
    "        f.write(\"VAR Model Interpretation:\\n\\n\")\n",
    "        for var in results.names:\n",
    "            f.write(f\"Equation for {var}:\\n\")\n",
    "            for lag in range(1, 4):\n",
    "                for exog_var in results.names:\n",
    "                    coef = results.params[f\"L{lag}.{exog_var}\"][var]\n",
    "                    pval = results.pvalues[f\"L{lag}.{exog_var}\"][var]\n",
    "                    f.write(f\"  L{lag}.{exog_var}: Coefficient = {coef:.4f}, p-value = {pval:.4f}\\n\")\n",
    "            f.write(\"\\n\")\n",
    "\n",
    "    # Generate forecasts for the test period\n",
    "    fcinput = train.values[-3:]  # Last 3 rows for lags=3\n",
    "    forecast = results.forecast(fcinput, steps=len(test))\n",
    "    df_fc = pd.DataFrame(forecast, index=test.index, columns=train.columns)\n",
    "\n",
    "    return results, train, test, df_fc\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    from import_data import import_data\n",
    "    from merge_data import merge_data\n",
    "    from feature_engineering import feature_engineering\n",
    "    from stationarity_check import check_stationarity\n",
    "    unemp_q, inflat_q, fedfund_q = import_data()\n",
    "    df = merge_data(unemp_q, inflat_q, fedfund_q)\n",
    "    df = feature_engineering(df)\n",
    "    stationary_df = check_stationarity(df)\n",
    "    results, train, test, df_fc = fit_var_model(stationary_df)\n",
    "    print(\"VAR model fitted successfully\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
